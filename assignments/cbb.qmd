```{r}
library(tidyverse)
library(Hmisc)
```

```{r}
logs <- read_csv("https://dwillis.github.io/sports-data-files/cbblogs1523.csv")
```

```{r}
logs <- logs |> mutate(
  Differential = TeamScore - OpponentScore, 
  NetRebounds = TeamTotalRebounds - OpponentTotalRebounds,
  TurnoverMargin = TeamTurnovers - OpponentTurnovers)
```

```{r}
rebounds <- lm(Differential ~ NetRebounds, data=logs)
summary(rebounds)
```
We are able to determine that net rebounds do have some impact on point differences during a game, and this is based less on the fact that it happens by chance (i.e., there is some strategy involved). However, the relationship between the two doesn't appear as strong as we initially expected.

```{r}
rebounds_turnovers <- lm(Differential ~ NetRebounds + TurnoverMargin, data=logs)
summary(rebounds_turnovers)
```
```{r}
model1 <- lm(Differential ~ NetRebounds + TurnoverMargin, data=logs)
summary(model1)
```
```{r}
simplelogs <- logs |> select_if(is.numeric) |> select(-Game) |> select(Differential, NetRebounds, TurnoverMargin, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)
```

```{r}
cormatrix <- rcorr(as.matrix(simplelogs))

cormatrix$r
```

```{r}
model2 <- lm(Differential ~ NetRebounds + TurnoverMargin + TeamFGPCT + OpponentFGPCT, data=logs)
summary(model2)
```

```{r}
logs |> 
  filter(Team == "Michigan" & Season == '2020-2021' | Team == "Wisconsin" & Season == '2019-2020' | Team == "Michigan State" & Season == '2018-2019' | Team == "Michigan State" & Season == '2017-2018' | Team == 'Illinois' & Season == '2021-2022' | Team == 'Purdue' & Season == '2022-2023') |> 
  summarise(
    meanNetRebounds = mean(NetRebounds),
    meanTurnoverMargin = mean(TurnoverMargin),
    meanTeamFGPCT = mean(TeamFGPCT),
    meanOpponentFGPCT = mean(OpponentFGPCT)
  )
```

```{r}
# (netrebounds estimate * meanNetRebounds) + (turnover margin estimate * meanTurnoverMargin) + (TeamFGPCT estimate * meanTeamFGPCT) + (OpponentFGPCT estimate * meanOpponentFGPCT) + Intercept
(0.654800*6.05) + (-1.310579*0.6333333) + (90.805990*0.4543167) + (-91.351310*0.4107167) + 0.287665
```

```{r}
logs |> 
  filter(
    Team == "Maryland" & Season == '2022-2023'
    ) |> 
  summarise(
    meanNetRebounds = mean(NetRebounds),
    meanTurnoverMargin = mean(TurnoverMargin),
    meanTeamFGPCT = mean(TeamFGPCT),
    meanOpponentFGPCT = mean(OpponentFGPCT)
  )
```

```{r}
(0.654800*1.685714) + (-1.310579*0.9142857) + (90.805990*0.4517714) + (-91.351310*0.428) + 0.287665
```

```{r}
logs |> 
     filter(
         Team == "Maryland" & Season == '2022-2023'
     ) |> summarise(avg_score = mean(TeamScore), avg_opp = mean(OpponentScore))
```

```{r}
residualmodel <- logs |> mutate(differential = TeamScore - OpponentScore, FGPctMargin = TeamFGPCT - OpponentFGPCT)
```

```{r}
fit <- lm(differential ~ FGPctMargin, data = residualmodel)
summary(fit)
```

```{r}
residualmodel <- residualmodel |> filter(!is.na(FGPctMargin))

residualmodel <- residualmodel |> mutate(predicted = predict(fit), residuals = residuals(fit))

residualmodel |> filter(Conference == 'Big Ten') |> arrange(desc(residuals)) |> select(Date, Team, Opponent, W_L, differential, FGPctMargin, predicted, residuals)
```

```{r}
gamelogs <- read_csv("https://dwillis.github.io/sports-data-files/wbblogs23.csv")

teamquality <- gamelogs |> 
  select(Conference, Team, TeamFGPCT, TeamTotalRebounds, OpponentFGPCT, OpponentTotalRebounds)

teamtotals <- teamquality |> 
  group_by(Conference, Team) |> 
  summarise(
    FGAvg = mean(TeamFGPCT), 
    ReboundAvg = mean(TeamTotalRebounds), 
    OppFGAvg = mean(OpponentFGPCT),
    OffRebAvg = mean(OpponentTotalRebounds)
    ) 
```
```{r}
teamzscore <- teamtotals |> 
  mutate(
    FGzscore = as.numeric(scale(FGAvg, center = TRUE, scale = TRUE)),
    RebZscore = as.numeric(scale(ReboundAvg, center = TRUE, scale = TRUE)),
    OppZscore = as.numeric(scale(OppFGAvg, center = TRUE, scale = TRUE)) * -1,
    OppRebZScore = as.numeric(scale(OffRebAvg, center = TRUE, scale = TRUE)) * -1,
    TotalZscore = FGzscore + RebZscore + OppZscore + OppRebZScore
  )  

head(teamzscore)
```
```{r}
teamzscore |> arrange(desc(TotalZscore))
```
```{r}
teamzscore |> 
  filter(Conference == "Big Ten WBB") |> 
  arrange(desc(TotalZscore)) |>
  select(Team, TotalZscore)
```
```{r}
powerfive_plus_one <- c("SEC WBB", "Big Ten WBB", "Pac-12 WBB", "Big 12 WBB", "ACC WBB", "Big East WBB")
teamzscore |> 
  filter(Conference %in% powerfive_plus_one) |> 
  arrange(desc(TotalZscore)) |>
  select(Team, TotalZscore)
```

```{r}
logs <- read_csv("https://dwillis.github.io/sports-data-files/logs22.csv")
```

```{r}
umd <- logs |> filter(Team == "Maryland")

ggplot() + geom_line(data=umd, aes(x=Date, y=TeamFGPCT))
```

```{r}
ggplot() + 
  geom_line(data=umd, aes(x=Date, y=TeamFGPCT)) + 
  scale_y_continuous(limits = c(0, .6))
```

```{r}
ill <- logs |> filter(Team == "Illinois")

ggplot() + geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color="red")
```

```{r}
ggplot() + 
  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color="red") + 
  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color="orange")
```

```{r}
ggplot() + 
  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color="red") + 
  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color="orange") + 
  scale_y_continuous(limits = c(0, .70))
```

```{r}
powerfive <- c("SEC", "Big Ten", "Pac-12", "Big 12", "ACC")

p5conf <- logs |> filter(Conference %in% powerfive)

ggplot() + 
  geom_line(data=p5conf, aes(x=Date, y=TeamFGPCT, group=Team), color="grey") + 
  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color="red") + 
  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color="orange") + 
  scale_y_continuous(limits = c(0, .65))
```

```{r}
average <- logs |> group_by(Date) |> summarise(mean_shooting=mean(TeamFGPCT))

ggplot() + 
  geom_line(data=p5conf, aes(x=Date, y=TeamFGPCT, group=Team), color="grey") + 
  geom_line(data=umd, aes(x=Date, y=TeamFGPCT), color="red") + 
  geom_line(data=ill, aes(x=Date, y=TeamFGPCT), color="orange") + 
  geom_line(data=average, aes(x=Date, y=mean_shooting), color="black") + 
  scale_y_continuous(limits = c(0, .70))
```
##### Facet Wraps

```{r}
logs <- read_csv("https://dwillis.github.io/sports-data-files/logs23.csv")
```

```{r}
big10 <- logs |> filter(Conference == "Big Ten MBB") |> filter(!is.na(TeamFGPCT))

ggplot() + 
  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + 
  scale_y_continuous(limits = c(0, .7))
```

```{r}
ggplot() + 
  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + 
  scale_y_continuous(limits = c(0, .7)) + 
  facet_wrap(~Team)
```

```{r}
big10 |> summarise(mean(TeamFGPCT))
```

```{r}
ggplot() + 
  geom_hline(yintercept=0.4487757, color="blue") + 
  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + 
  scale_y_continuous(limits = c(0, .7)) + 
  facet_wrap(~Team)
```

```{r}
ggplot() + 
  geom_hline(yintercept=0.4487757, color="blue") + 
  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + 
  scale_y_continuous(limits = c(0, .7)) + 
  facet_grid(Team ~ .)
```

```{r}
ggplot() + 
  geom_hline(yintercept=0.4487757, color="blue") + 
  geom_line(data=big10, aes(x=Date, y=TeamFGPCT, group=Team)) + 
  scale_y_continuous(limits = c(0, .7)) + 
  facet_grid(. ~ Team)
```

```{r}
ggplot() + 
  geom_point(data=big10, aes(x=TeamFGPCT, y=OpponentFGPCT, color=W_L)) +
  scale_y_continuous(limits = c(0, .7)) + 
  scale_x_continuous(limits = c(0, .7)) + 
  facet_wrap(~Team)
```
##### Early Season Analysis Exercise (11/9/23)

```{r}
data_2015_to_now <- read_csv("https://raw.githubusercontent.com/dwillis/dwillis.github.io/main/docs/sports-data-files/cbblogs1524.csv")
```

```{r}
data_2015_to_now_filtered <- data_2015_to_now |>
  filter(Team == "Maryland") |>
  filter(Game <= 5)
```

Here, I filtered the data from 2015 to now by the games in which Maryland played. In this case, I consider the first five games to be early in the season, so I filtered by that as well. I also made a separate column showing whether the won their game (with a 1) or lost it (with a 0).

```{r}
ggplot() + 
  geom_hline(yintercept=78, color="blue") +
  geom_point(data=data_2015_to_now_filtered, aes(x=Game, y=TeamScore, group=Season)) + 
  scale_y_continuous(limits = c(50, 100)) +
  facet_wrap(~Season)
```

```{r}
data_2015_to_now_filtered |> summarise(mean(TeamScore))
```
Here, with the help of facet wraps, I created point graphs for the team's score throughout the first five games of several seasons, and then I calculated an average number of the score (78 points) to serve as a baseline. We can see that 2020-2021 was Maryland's best early-performing season based on the fact that four of the five points are above the baseline, suggesting that the team's performance was improved while they were imploring strategies during the pandemic. The season after (2021-2022) was the worst early-performing season since four of the five points are below the baseline. In 2023, we can see that the score of 68 from Tuesday is below the baseline, suggesting that Maryland is not off to a good start for the 2023-2024 season. 

#####

```{r}
library(rvest)
```

```{r}
scoringoffenseurl <- "http://www.cfbstats.com/2022/leader/national/team/offense/split01/category09/sort01.html"

scoringoffense <- scoringoffenseurl |>
  read_html() |>
  html_nodes(xpath = '//*[@id="content"]/div[2]/table') |>
  html_table()

scoringoffense <- scoringoffense[[1]]

head(scoringoffense)
```

```{r}
scoringoffenseurl21 <- "http://www.cfbstats.com/2021/leader/national/team/offense/split01/category09/sort01.html"

scoringoffense21 <- scoringoffenseurl21 |>
  read_html() |>
  html_nodes(xpath = '//*[@id="content"]/div[2]/table') |>
  html_table()

scoringoffense21 <- scoringoffense21[[1]]

scoringoffense22 <- scoringoffense |> rename(Rank = 1) |> mutate(YEAR = 2022)
scoringoffense21 <- scoringoffense21 |> rename(Rank = 1) |> mutate(YEAR = 2021)

combined <- bind_rows(scoringoffense22, scoringoffense21)

head(combined)
```

```{r}
url <- "https://www.sports-reference.com/cbb/seasons/2023-school-stats.html"

stats <- url |>
  read_html() |>
  html_nodes(xpath = '//*[@id="basic_school_stats"]') |>
  html_table(header=FALSE)

stats <- stats[[1]] |> slice(-1) |> slice(-1)

head(stats)
```

